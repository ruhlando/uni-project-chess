@startuml

' Teilnehmer
actor Player
participant Play
participant Board
participant Field
participant Pawn as Piece
participant MovementHandler
participant GameStatus
participant GameTimer

' Start des Zuges
Player -> GameTimer++ : startTimer()
Player -> Play++ : triggerMove()
Play -> Board++ : getPieces()
Board -> Piece++ : makeMove()

loop checkTime()
alt timeout
GameTimer ->> Play : timeOut()
else moveComplete
Play -> GameTimer : stopTimer()
GameTimer--
end
end

' Validierung des Bauernzugs
Piece -> MovementHandler++ : validateMove()
MovementHandler -> Field++ : isOccupied()
Field --> MovementHandler : return (frei/besetzt)
Field--
MovementHandler --> Piece : return (Zug gültig/ungültig)
MovementHandler--

' Bedingung: En Passant, Promotion oder Schlagen
alt En Passant möglich
    Piece -> Field++ : move to target field
    Field -> Board : remove opponent Piece (En Passant)
    Field--
end

alt Promotion möglich
    Piece -> Player : prompt for promotion choice
    Player -> Piece : convert to chosen Piece
end

alt Capture
    Piece -> Field++ : move to target field
    Field -> Board : remove opponent Piece
    Field--
end

' Normaler Zug oder nach Sonderzug ausgeführt
Piece -> Field++ : move to target field
Field--
Piece -> Play : recordMove()
Piece--

' Spielstatus aktualisieren
Play -> GameStatus++ : updateStatus()
GameStatus -> Play : checkForCheck()
GameStatus -> Play : checkForMate()
GameStatus--

' Rückmeldung an den Spieler
Play --> Player : Move completed
Play--
Board--

@enduml
